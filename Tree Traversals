/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/
vector<int>ans;
void inorder(BinaryTreeNode<int>*root)
{
    if(root==NULL )
        return;
    inorder(root->left);
    ans.push_back(root->data);
    inorder(root->right);
}
void preorder(BinaryTreeNode<int>*root)
{
    if(root==NULL )
        return;
   
    ans.push_back(root->data);
    preorder(root->left);
    preorder(root->right);
}
void postorder(BinaryTreeNode<int>*root)
{
    if(root==NULL )
        return;
    postorder(root->left);
   
    postorder(root->right);
     ans.push_back(root->data);
}
vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
    vector<vector<int>>res;
    ans.clear();
    inorder(root);
    res.push_back(ans);
    ans.clear();
    preorder(root);
    res.push_back(ans);
    ans.clear();
    postorder(root);
    res.push_back(ans);
    ans.clear();
    return res;
    
}
