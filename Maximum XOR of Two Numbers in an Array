class Node{
    public:
    Node*child[2];
};
class trie{
   Node*t;
    public:
    trie(){
        t = new Node();
    }
    
    void insert(int n)
    {
        int ind =31;
        Node*cur = t;
        while(ind>=0)
        {
            int mask = 1<<ind;
            int bit = (mask&n)>0?1:0;
            if(bit==0)
            {
                if(cur->child[0]==NULL)
                {
                    cur->child[0]=new Node();
                }
                cur=cur->child[0];
            }
            else
            {
                if(cur->child[1]==NULL)
                {
                    cur->child[1]=new Node();
                }
                cur=cur->child[1];
            }
            ind--;
        }
    }
    
    int search(int n)
    {
        int ind =31;
        int ans=0;
        Node*cur = t;
        while(ind>=0)
        {
            int mask = 1<<ind;
            int bit = (mask&n)>0?1:0;
            if(bit==1)
            {
                if(cur->child[0]!=NULL)
                {
                    cur=cur->child[0];
                    
                    
                }
                else
                {
                    ans=ans|mask;
                     cur=cur->child[1];
                }
            }
            else
            {
                if(cur->child[1]!=NULL)
                {
                    ans = ans|mask;
                    cur=cur->child[1];
                }
                else
                {
                    cur=cur->child[0];
                }
            }
            ind--;
        }
       return ans; 
    }
};



int maximumXor(vector<int> A)
{
    int res=0;
    trie*root=new trie();
    for(int i=0;i<A.size();i++)
    {
        root->insert(A[i]);
    }
     for(int i=0;i<A.size();i++)
     {
         int a = root->search(A[i]);
         res=max(res,A[i]^a);
     }
    return res;
}
