/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */
class Node{
    
    public:
    char ch;
    int we;
    Node* child[26];
    Node()
    {
        we=0;
    }
    Node(char c)
    {
        ch = c;
        we=0;
    }
};

class Trie {

public:

    /** Initialize your data structure here. */
    Node*root;
    Trie() {
      root = new Node();
        
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        
        Node* temp =root;
        for(int i=0;i<word.size();i++)
        {
            int ind = word[i]-'a';
            if(temp->child[ind]==NULL)
            {
                Node*n = new Node(word[i]);
                temp->child[ind]=n;
                temp=n;
               
            }
            else
            {
                temp=temp->child[ind];
            }
        }
        temp->we++;

    }

    /** Returns if the word is in the trie. */
    bool search(string word) {

        Node*temp = root;
        for(int i=0;i<word.size();i++)
        {
            int ind = word[i]-'a';
            if(temp->child[ind]!=NULL)
            {
                temp=temp->child[ind];
            }
            else
                return false;
            
        }
        return temp->we>0;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string word) {
Node*temp = root;
        for(int i=0;i<word.size();i++)
        {
            int ind = word[i]-'a';
            if(temp->child[ind]!=NULL)
            {
                temp=temp->child[ind];
            }
            else
                return false;
            
        }
        return true;
    }
};
